// $Author: stucn3, biglc5, holzj1
// $Id: Logo.jj 1.0 28.05.2014 stucn3, biglc5, holzj1 $
//
// Parser and translator of a subset of Logo into Java
options{  FORCE_LA_CHECK = true;  //DEBUG_PARSER = true;
  //DEBUG_TOKEN_MANAGER = true;
}PARSER_BEGIN(Logo)import java.lang.*;import java.io.*;import java.util.*;public class Logo{  static private File javaFile, htmlFile; // output files
  static private PrintWriter pw; // printwriter used for every output
  static private int numIndent = 0; // size of indentation
  // to pretty-print the translation
  // uses numIndent and pw defined as static variables in LogoParser
  // writes in pw the numIndent times the indent string
  public static void indent()  {    for (int i = 0; i < numIndent; i++)    {      pw.print("   ");    }  }  // Main method that reads the source file ".logo" and translates it
  // into two files: ".java" ".html"
  public static void main(String args []) throws ParseException, TokenMgrError, IOException  {    // reads the source file ".logo" (first argument of command line)
    BufferedReader in = new BufferedReader(new FileReader(args [0]));    Logo parser = new Logo(in);    try    {      parser.start();      System.out.println("DONE");    }    catch (ParseException x)    {      System.out.println("Syntaxtic Error");      throw x;    }    catch (TokenMgrError x)    {      System.out.println("Lexical Error");      throw x;    }  }}PARSER_END(Logo)// skip separators
SKIP :{  < " "  | "\t"  | "\n"  | "\r"  | < COMMENT >>}// Constants, pre-defined, operators etc.
TOKEN :{  < ADD : "+" >| < SUB : "-" >| < MUL : "*" >| < DIV : "/" >}TOKEN :{  < LPAR : "(" >| < RPAR : ")" >| < #PARSEP : ":" >}TOKEN :{  < LBRA : "[" >| < RBRA : "]" >}TOKEN :{  < EQ : "==" >| < NE : "!=" >}TOKEN :{  < LT : "<" >| < GT : ">" >| < LE : "<=" >| < GE : ">=" >}TOKEN :{  < AND : "AND" >| < OR : "OR" >}TOKEN :{  < TRUE : "TRUE" >| < FALSE : "FALSE" >| < NOT : "NOT" >}// REPCOUNT is a pre-defined identifier rather than a keyword
TOKEN :{  < REPCOUNT : "REPCOUNT" >}// Keywords
TOKEN :{  < CLEARSCREEN : "CS" >| < PENDOWN : "PD" >| < PENUP : "PU" >| < FORWARD : "FD" >| < BACKWARD : "BK" >| < LEFTTURN : "LT" >| < RIGHTTURN : "RT" >| < HIDETURTLE : "HT" >| < SHOWTURTLE : "ST" >| < WAIT : "WAIT" >| < REPEAT : "REPEAT" >| < IF : "IF" >| < IFELSE : "IFELSE" >| < SUBROUTINE : "TO" >| < LOGO : "LOGO" >| < END : "END" >}// Numerical values, identifiers, and parameters
TOKEN :{  < #DIGIT : [ "0"-"9" ] >}TOKEN :{  < #LETTER : [ "A"-"Z" ] >}TOKEN :{  < NUM :    (< DIGIT >)+  | (< DIGIT >)+ "." (< DIGIT >)+ >}TOKEN :{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >}TOKEN :{  < PARAMETER : < PARSEP > < IDENTIFIER >> // removes parameter separator}TOKEN :{  < #HASH : "#" >}TOKEN :{  < COMMENT :    (      < HASH > (~[ "\n", "\r" ])*      (        "\n"      | "\r"      | "\r\n"      )    ) >}//          { matchedToken.image=image.substring(1,image.length()); }
void start() throws IOException :{  Token t;}{  // logo programs start with LOGO followed by an identifier
  < LOGO > t = < IDENTIFIER >  // Creation of the output files
  {    // Create the HTML file for the applet
    htmlFile = new File(t.image.toLowerCase() + ".html");    pw = new PrintWriter(new FileOutputStream(htmlFile));    pw.println("<html>");    pw.println("  <body>");    pw.println("  <applet code='" + t.image.toLowerCase() + ".class'width=600 height=600></applet>");    pw.println("  </html>");    pw.println("</body>");    pw.close();    //Create the Java file and the class
    javaFile = new File(t.image.toLowerCase() + ".java");    pw = new PrintWriter(new FileOutputStream(javaFile));    pw.println("import java.awt.Graphics;\n");    pw.println("public class " + t.image.toLowerCase() + " extends java.applet.Applet {\n");    numIndent++;    indent();    pw.println("private LogoPrimitives logo;\n");    pw.flush();  }  ( subroutine() )*
  // Open the necessary method "paint" of the applet
  {    indent();    numIndent++;    pw.println("public void paint(Graphics g) {");    indent();    pw.println("logo = new LogoPrimitives(this);");    pw.println();  }  ( statement() )*
  // close the method "paint"
  {    numIndent--;    indent();    pw.println("}");  }  // close the class
  < END >  {    numIndent--;    indent();    pw.println("}");    pw.flush();    pw.close();  }}void subroutine() :{  Token t;  String printString = "";  String parameter = "";}{  (    < SUBROUTINE > t = < IDENTIFIER >    {      pw.print("private void " + t.image.toLowerCase() + "(");    }    (      t = < PARAMETER >      {        parameter = t.image.substring(1, t.image.length()).toLowerCase();        printString += "double " + parameter + ",";      }    )*    {      //Remove last ","      pw.println(printString.substring(0, printString.length() - 1) + ") {\n");    }    (      statement()    )*    {      pw.println("}\n");    }    < END >    {      pw.flush();    }  )}void statement() :{
  Token t;  String rValue = "";  String nexpr;  String bexpr;}{  (    < CLEARSCREEN >    {      pw.println("logo.cs();\n");    }  | < PENDOWN >    {      pw.println("logo.pd();\n");    }  | < PENUP >    {      pw.println("logo.pu();\n");    }  | < HIDETURTLE >    {      pw.println("logo.ht();\n");    }  | < SHOWTURTLE >    {      pw.println("logo.st();\n");    }  | < FORWARD > nexpr = nexpr()    {      pw.println("logo.fd(" + nexpr + ");\n");    }  | < BACKWARD > nexpr = nexpr()    {      pw.println("logo.bk(" + nexpr + ");\n");    }  | < LEFTTURN > nexpr = nexpr()    {      pw.println("logo.lt(" + nexpr + ");\n");    }  | < RIGHTTURN > nexpr = nexpr()    {      pw.println("logo.rt(" + nexpr + ");\n");    }  | < WAIT > nexpr = nexpr()    {      pw.println("logo.wait(" + nexpr + ");\n");    }  | (< REPEAT > nexpr = nexpr()    {      pw.println("for(int i = 0; i < " + nexpr + "; i++){\n");    }    < LBRA >    (      statement()    )*    < RBRA >    {      pw.println(rValue + "}\n");    })  | < IF > bexpr = bexpr()    {      pw.println("if (" + bexpr + "){\n");    }    < LBRA >    (      statement()    )*    < RBRA >    {      pw.println("}\n");    }  | < IFELSE > bexpr = bexpr()    {      pw.println("if (" + bexpr + "){\n");    }    < LBRA >    (      statement()    )*    < RBRA >    {      pw.println("} else {\n");    }    < LBRA >    (      statement()    )*    < RBRA >    {      pw.println("}\n");    }  | t = < IDENTIFIER >    {      pw.println(t.image.toLowerCase() + "(");    }    (      nexpr = nexpr()      {        rValue += nexpr + ",";      }    )*    {      //Remove last "," 
      pw.println(rValue.substring(0, rValue.length() - 1) + ");\n");    }  )
  {
    pw.flush();  }}String nexpr() :{  String rValue = "";  String nterm;}{  (    rValue = nterm()    (      < ADD > nterm = nterm()      {        rValue += " + " + nterm;      }    | < SUB > nterm = nterm()      {        rValue += " - " + nterm;      }    )*  )  {    return rValue;  }}String nterm() :
{
  String rValue = "";
  String nfactor;
}
{
  (
    rValue = nfactor()
    (
      < MUL > nfactor = nfactor()
      {
        rValue += " * " + nfactor;
      }
    | < DIV > nfactor = nfactor()
      {
        rValue += " / " + nfactor;
      }
    )*
  )
  {
    return rValue;
  }
} String nfactor() :{  Token t;  String rValue = "";  String nexpr;  String parameter;}{  (    < SUB >  {    rValue += " - ";  }  (    t = < NUM >    {      rValue += t.image.toLowerCase();    }  | < REPCOUNT >    {      // TODO
      rValue += "i";    }  | t = < PARAMETER >    {      parameter = t.image.substring(1, t.image.length()).toLowerCase();      rValue += parameter;    }  | < LPAR > nexpr = nexpr()    {      rValue += "(" + nexpr;    }    < RPAR >    {      rValue += ")";    }  )| t = < NUM >  {    rValue += t.image.toLowerCase();  }| < REPCOUNT >  {    // TODO
    rValue += "i";  }| t = < PARAMETER >  {    parameter = t.image.substring(1, t.image.length()).toLowerCase();    rValue += parameter;  }| < LPAR > nexpr = nexpr()  {    rValue += "(" + nexpr;  }  < RPAR >  {    rValue += ")";  })  {    return rValue;  }}String bexpr() :{  String rValue = "";  String bterm;}{  (    rValue = bterm()    (      < OR > bterm = bterm()      {        rValue += " || " + bterm;      }    )*  )  {    return rValue;  }}String bterm() :{  String rValue = "";  String bfactor;}{  (    rValue = bfactor()    (      < AND > bfactor = bfactor()      {        rValue += " && " + bfactor;      }    )*  )  {    return rValue;  }}String bfactor() :{  String rValue = "";  String bexpr;  String nexpr;}{  < TRUE >  {    rValue += "true";  }| < FALSE >  {    rValue += "false";  }| < NOT >  {    rValue += "!";  }  < LPAR > bexpr = bexpr()  {    rValue += "(" + bexpr;  }  < RPAR >  {    rValue += ")";  }| nexpr = nexpr()  {    rValue += nexpr;  }  (    < EQ >    {      rValue += " == ";    }  | < NE >    {      rValue += " != ";    }  | < LT >    {      rValue += " < ";    }  | < GT >    {      rValue += " > ";    }  | < LE >    {      rValue += " <= ";    }  | < GE >    {      rValue += " >= ";    }  )  nexpr = nexpr()  {    rValue += nexpr;  }  {    return rValue;  }}
